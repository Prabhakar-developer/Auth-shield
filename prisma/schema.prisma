// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Users {
  uuid                  String                  @id @unique @default(uuid())
  username              String                  @unique
  email                 String                  @unique
  password_hash         String
  first_name            String?
  last_name             String?
  is_active             String                  @default("ACTIVE")
  created_at            DateTime                @default(now())
  created_by            String                  @default("STORE UUID")
  updated_at            DateTime?               @updatedAt
  updated_by            String?
  deleted_at            DateTime?
  deleted_by            String?
  User_Profiles         User_Profiles[]
  User_Roles            User_Roles[]
  Account_Verifications Account_Verifications[]
  Activity_Logs         Activity_Logs[]
  Sessions              Sessions[]
  AuditLog              AuditLog[]
  PasswordReset         PasswordReset[]         @relation("UserPasswordReset")

  @@index([email])
  @@index([username])
  @@index([is_active])
}

model User_Profiles {
  id              Int       @id @default(autoincrement())
  user_id         String
  phone_number    String?   @unique
  address         String?
  profile_picture String?
  bio             String?
  date_of_birth   DateTime?
  gender          String?
  created_at      DateTime  @default(now())
  updated_at      DateTime  @default(now()) @updatedAt

  user Users @relation(fields: [user_id], references: [uuid], onDelete: Cascade)

  @@index([user_id])
}

model Roles {
  id               Int                @id @default(autoincrement())
  name             String             @unique
  description      String?
  created_at       DateTime           @default(now())
  updated_at       DateTime           @default(now()) @updatedAt
  User_Roles       User_Roles[]
  Role_Permissions Role_Permissions[]
}

model Permissions {
  id               Int                @id @default(autoincrement())
  name             String             @unique
  description      String?
  created_at       DateTime           @default(now())
  updated_at       DateTime           @default(now()) @updatedAt
  Role_Permissions Role_Permissions[]
}

model User_Roles {
  user_id String
  role_id Int

  assigned_at DateTime @default(now())

  user Users @relation(fields: [user_id], references: [uuid], onDelete: Cascade)
  role Roles @relation(fields: [role_id], references: [id], onDelete: Cascade)

  @@id([user_id, role_id])
  @@index([user_id, role_id])
}

model Role_Permissions {
  role_id       Int
  permission_id Int

  assigned_at DateTime @default(now())

  role       Roles       @relation(fields: [role_id], references: [id], onDelete: Cascade)
  permission Permissions @relation(fields: [permission_id], references: [id], onDelete: Cascade)

  @@id([role_id, permission_id])
  @@index([role_id, permission_id])
}

model Account_Verifications {
  id                Int      @id @default(autoincrement())
  user_id           String
  method            String
  email             String?
  phone_number      String?
  verification_code String   @unique
  expires_at        DateTime
  verified          Boolean  @default(false)
  created_at        DateTime @default(now())
  updated_at        DateTime @default(now()) @updatedAt

  user Users @relation(fields: [user_id], references: [uuid], onDelete: Cascade)

  @@index([user_id])
  @@index([verification_code])
}

model Activity_Logs {
  id         Int      @id @default(autoincrement())
  user_id    String
  activity   String
  details    String?
  ip_address String?
  user_agent String?
  created_at DateTime @default(now())

  user Users @relation(fields: [user_id], references: [uuid], onDelete: Cascade)

  @@index([user_id])
  @@index([created_at])
}

model Sessions {
  id            Int       @id @default(autoincrement())
  user_id       String
  session_token String    @unique
  ip_address    String?
  user_agent    String?
  created_at    DateTime  @default(now())
  expires_at    DateTime?
  is_active     String    @default("ACTIVE")

  user Users @relation(fields: [user_id], references: [uuid], onDelete: Cascade)

  @@index([user_id])
  @@index([session_token])
  @@index([expires_at])
}

model AuditLog {
  id        Int      @id @default(autoincrement())
  tableName String
  operation String
  userId    String?
  timestamp DateTime @default(now())
  changes   String // String instead of Json

  user Users? @relation(fields: [userId], references: [uuid], onDelete: Cascade)
}

model PasswordReset {
  id          Int      @id @default(autoincrement())
  user_id     String
  otp         String   @unique
  expires_at  DateTime
  is_verified Boolean  @default(false)
  created_at  DateTime @default(now())

  user Users @relation(fields: [user_id], references: [uuid], onDelete: Cascade, name: "UserPasswordReset")

  @@index([user_id])
  @@index([otp])
}
